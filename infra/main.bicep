// The templates are generated by bicep IaC generator
targetScope = 'subscription'

param location string = 'eastus'
param resourceGroupName string = 'rg-myenv'
param resourceToken string = toLower(uniqueString(subscription().id, location, resourceGroupName))
param containerAppApptemplatesspringbootapponaksName string = 'otapponaks${resourceToken}'
param mysqlMysql0Name string = 'mysql0${resourceToken}'
param mysqlMysql0AdminName string
@secure()
param mysqlMysql0Password string
param mysqlMysql0DatabaseName string = 'db${resourceToken}'
param postgreSqlPostgresql0Name string = 'ostgresql0${resourceToken}'
param postgreSqlPostgresql0AdminName string
@secure()
param postgreSqlPostgresql0Password string
param postgreSqlPostgresql0DatabaseName string = 'db_${resourceToken}'
param redisRedis0Name string = 'redis0${resourceToken}'
param keyVaultName string = 'kv${resourceToken}'
param containerAppEnvName string = 'env${resourceToken}'
param containerRegistryName string = 'acr${resourceToken}'


// Deploy an Azure Resource Group

resource resourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {
	name: resourceGroupName
	location: location
}

// Deploy an Azure Container App environment

module containerAppEnv 'containerappenv.bicep' = {
	name: 'container-app-env-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppEnvName
	}
}
var containerAppEnvId = containerAppEnv.outputs.id

// Deploy an Azure Container Registry

module containerRegistry 'containerregistry.bicep' = {
	name: 'container-registry-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerRegistryName
	}
}

// Deploy an Azure Container App

module containerAppApptemplatesspringbootapponaksDeployment 'containerapp.bicep' = {
	name: 'container-app-apptemplatesspringbootapponaks-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppApptemplatesspringbootapponaksName
		targetPort: 8080 
		containerAppEnvId: containerAppEnvId
		identityType: 'SystemAssigned'
		containerRegistryName: containerRegistryName  
		tags: {'azd-service-name': 'apptemplatesspringbootapponaks'}
	}
	dependsOn: [
		containerAppEnv
		containerRegistry
	]
}

// Deploy an Azure MySQL server and with database

module mysqlMysql0Deployment 'mysql.bicep' = {
	name: 'mysql-mysql0-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: mysqlMysql0Name
		adminName: mysqlMysql0AdminName
		adminPassword: mysqlMysql0Password
		databaseName: mysqlMysql0DatabaseName
		allowIps: union(containerAppApptemplatesspringbootapponaksDeployment.outputs.outboundIps, [])
		keyVaultName: keyVaultName
		secretName: 'mysql-mysql0-secret'
	}
	dependsOn: [
		keyVaultDeployment
		containerAppApptemplatesspringbootapponaksDeployment
	]
}

// Deploy an Azure PostgresSQL server and with database

module postgreSqlPostgresql0Deployment 'postgresqldb.bicep' = {
	name: 'postgresql-postgresql0-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: postgreSqlPostgresql0Name
		adminName: postgreSqlPostgresql0AdminName
		adminPassword: postgreSqlPostgresql0Password
		databaseName: postgreSqlPostgresql0DatabaseName
		allowIps: union(containerAppApptemplatesspringbootapponaksDeployment.outputs.outboundIps, [])
		keyVaultName: keyVaultName
		secretName: 'postgresql-postgresql0-secret'
	}
	dependsOn: [
		keyVaultDeployment
		containerAppApptemplatesspringbootapponaksDeployment
	]
}

// Deploy an Azure Cache for Redis

module redisRedis0Deployment 'redis.bicep' = {
	name: 'redis-redis0-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: redisRedis0Name
		allowIps: union(containerAppApptemplatesspringbootapponaksDeployment.outputs.outboundIps, [])
		keyVaultName: keyVaultName
		secretName: 'redis-redis0-secret'
	}
	dependsOn: [
		keyVaultDeployment
		containerAppApptemplatesspringbootapponaksDeployment
	]
}

// Deploy an Azure Keyvault

module keyVaultDeployment 'keyvault.bicep' = {
	name: 'key-vault--deployment'
	scope: resourceGroup
	params: {
		location: location
		name: keyVaultName
		principalIds: [
			containerAppApptemplatesspringbootapponaksDeployment.outputs.identityPrincipalId
		] 
		allowIps: union(containerAppApptemplatesspringbootapponaksDeployment.outputs.outboundIps, [])
	}
	dependsOn: [
		containerAppApptemplatesspringbootapponaksDeployment
	]
}

// Deploy an Azure Container App

module containerAppSettingsApptemplatesspringbootapponaksDeployment 'containerapp.bicep' = {
	name: 'container-app-settings-apptemplatesspringbootapponaks-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppApptemplatesspringbootapponaksName
		targetPort: 8080 
		secrets: [
			{
				name: 'azuremysqlconnectionstring-secret-name'
				value: 'jdbc:mysql://${mysqlMysql0Name}.mysql.database.azure.com:3306/${mysqlMysql0DatabaseName}?serverTimezone=UTC&sslmode=required&user=${mysqlMysql0AdminName}&password=${mysqlMysql0Password}'
			}
			{
				name: 'azurepostgresqlconnectionstring-secret-name'
				value: 'jdbc:postgresql://${postgreSqlPostgresql0Name}.postgres.database.azure.com:5432/${postgreSqlPostgresql0DatabaseName}?sslmode=require&user=${postgreSqlPostgresql0AdminName}&password=${postgreSqlPostgresql0Password}'
			}
			{
				name: 'redisredis0-connstr'
				keyVaultUrl: redisRedis0Deployment.outputs.keyVaultSecretUri
				identity: 'system'
			}
		]
		containerAppEnvId: containerAppEnvId
		identityType: 'SystemAssigned'
		containerRegistryName: containerRegistryName 
		containerEnv: [
			{
				name: 'AZURE_MYSQL_CONNECTIONSTRING'
				secretRef: 'azuremysqlconnectionstring-secret-name'
			}
			{
				name: 'AZURE_POSTGRESQL_CONNECTIONSTRING'
				secretRef: 'azurepostgresqlconnectionstring-secret-name'
			}
			{
				name: 'AZURE_REDIS_HOST'
				value: redisRedis0Deployment.outputs.hostName
			}
			{
				name: 'AZURE_REDIS_DATABASE'
				value: 'default'
			}
			{
				name: 'AZURE_REDIS_KEY'
				secretRef: 'redisredis0-connstr'
			}
			{
				name: 'AZURE_REDIS_PORT'
				value: redisRedis0Deployment.outputs.sslPort
			}
			{
				name: 'AZURE_REDIS_SSL'
				value: 'true'
			}
			{
				name: 'AZURE_KEYVAULT_RESOURCEENDPOINT'
				value: keyVaultDeployment.outputs.endpoint
			}
		] 
		tags: {'azd-service-name': 'apptemplatesspringbootapponaks'}
	}
	dependsOn: [
		mysqlMysql0Deployment
		postgreSqlPostgresql0Deployment
		redisRedis0Deployment
		keyVaultDeployment
	]
}



output containerAppApptemplatesspringbootapponaksId string = containerAppApptemplatesspringbootapponaksDeployment.outputs.id
output mysqlMysql0Id string = mysqlMysql0Deployment.outputs.id
output postgreSqlPostgresql0Id string = postgreSqlPostgresql0Deployment.outputs.id
output redisRedis0Id string = redisRedis0Deployment.outputs.id
output keyVaultId string = keyVaultDeployment.outputs.id
output containerRegistryApptemplatesspringbootapponaksId string = containerRegistry.outputs.id
output AZURE_CONTAINER_REGISTRY_ENDPOINT string = containerRegistry.outputs.loginServer

